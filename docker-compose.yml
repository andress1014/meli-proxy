# Configuración optimizada para 50K RPS

services:
  # 4 instancias del proxy optimizado
  proxy1:
    image: meli-proxy-optimized
    ports:
      - "8082:8080"
      - "9091:9090"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=warn
      - METRICS_PORT=9090
      - SERVER_PORT=8080
      - GOMAXPROCS=2
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
    restart: unless-stopped

  proxy2:
    image: meli-proxy-optimized
    ports:
      - "8083:8080"
      - "9092:9090"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=warn
      - METRICS_PORT=9090
      - SERVER_PORT=8080
      - GOMAXPROCS=2
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
    restart: unless-stopped

  proxy3:
    image: meli-proxy-optimized
    ports:
      - "8084:8080"
      - "9093:9090"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=warn
      - METRICS_PORT=9090
      - SERVER_PORT=8080
      - GOMAXPROCS=2
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
    restart: unless-stopped

  proxy4:
    image: meli-proxy-optimized
    ports:
      - "8085:8080"
      - "9094:9090"
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=warn
      - METRICS_PORT=9090
      - SERVER_PORT=8080
      - GOMAXPROCS=2
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
    restart: unless-stopped

  # Redis optimizado
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "8091:80"  # Cambiado a puerto 8091 para evitar conflictos
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - proxy1
      - proxy2
      - proxy3
      - proxy4
    restart: unless-stopped

  # Prometheus - Sistema de métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - proxy1
      - proxy2
      - proxy3
      - proxy4

  # Grafana - Dashboard de métricas
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
